Create a linked list that allows:
- An add function that takes a value and inserts it into a given position
in the list (example myList.add(someValue, somePosistion))
- A remove funtion that takes a position and removes the value stored at 
that posistion in the list and returns it (example myList.remove(somePosistion))
- A get function that takes a position and returns that value without removing it
(example myList.get(somePosition))

Tests:
- Be sure to include at least one test function for each piece of functionality 
that should verify that your code is working!  This should be at least one test per behavior, likely more.  

Linked List:
- node
- some sort of data
- address of the next node
- pointer to head

add():
- Create a newNode that has newData
- Find the desired posistion you want newData to be and -1 so it'll be entered after that position
- Set the newNode's next to the (position - 1) next and the previous positions next as the newNode's next

Tests/Checks():
- if the position you want to add to is 1, that's the head so switch the head pointer to newNode 
- if the previous position's next = NULL, then the positions doesn't exist
- if the list is empty, i.e head = NULL, make the newNode created the head
- check for invalid positions/data entered

remove():
- Check if the head is = to nullptr, if it is, the list is empty. Print 'empty'
- Create a temporary pointer, 'temp', that takes the value that's going to be removed
- Create a variable, 'removedValue', to store the value that's going to be removed
- Traverse through the list until the node is -1 postion or the end of the list (if it's the end of the list print 'invalid position')
- Update the temp pointer so it points to the node after -1 position
- Set the temp pointer's data to the removedValue var
- Delete the temp pointer and return removedValue

Tests/Checks():
- if the list is empty
- check if the positions of the value that's to be removed, if it's 0, update the head pointer
- if it deleted the right value from the right posistion

get():
- Again, checks for an empty list by seeing if the head = nullptr
- Create a pointer called 'current' to traverse the list an a var called 'currentPosition' to watch the current position
- 

Tests/Checks():
- if it returned the value asked for
- if you ask for an invalid return i.e a value at say a negative position